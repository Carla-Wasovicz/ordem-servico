package br.edu.ifms.ordemservico.services;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.client.ResourceAccessException;

import br.edu.ifms.ordemservico.dto.ServidorDTO;
import br.edu.ifms.ordemservico.entities.Servidor;
import br.edu.ifms.ordemservico.repositories.ServidorRepository;

@Service
public class ServidorService {
	
	@Autowired
	private ServidorRepository repository;
	
	@Transactional(readOnly = true)
	public List<ServidorDTO> findAll(){
		List<Servidor> list = repository.findAll();
		return list.stream().map(servidor -> new ServidorDTO(servidor))
				.collect(Collectors.toList());
	}
	
	@Transactional(readOnly = true)
	public ServidorDTO findById(Long id){
		Optional<Servidor> obj = repository.findById(id);
		Servidor servidor = obj.orElseThrow(( )-> new ResourceAccessException("O servidor solicitado n√£o foi localizado.") );
		return new ServidorDTO(servidor);
		
	}
	
	@Transactional
	public ServidorDTO insert(ServidorDTO dto) {
		Servidor servidor = new Servidor();
		servidor = repository.save(servidor);
		return new ServidorDTO(servidor);
	}
	
	@Transactional
	public ServidorDTO update(Long id, ServidorDTO dto) {
		Servidor servidor = repository.getById(id);
		copyDtoToEntity(dto, servidor);
		servidor = repository.save(servidor);
		return new ServidorDTO(servidor);
	}

	private void copyDtoToEntity(ServidorDTO dto, Servidor servidor) {
		servidor.setNome(dto.getNome());
		servidor.setEmail(dto.getEmail());
		servidor.setTelefone(dto.getTelefone());
		servidor.setSenha(dto.getSenha());
	}
	
	
	
	
}
